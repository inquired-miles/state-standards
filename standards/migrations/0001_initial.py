# Generated by Django 5.2.1 on 2025-08-04 21:55

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ContentAlignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content_title", models.CharField(max_length=200)),
                ("content_text", models.TextField()),
                (
                    "content_hash",
                    models.CharField(
                        help_text="SHA-256 hash of content", max_length=64, unique=True
                    ),
                ),
                ("content_embedding", models.TextField(blank=True, null=True)),
                ("original_filename", models.CharField(blank=True, max_length=255)),
                (
                    "file_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pdf", "PDF Document"),
                            ("docx", "Word Document"),
                            ("txt", "Text File"),
                            ("html", "HTML Content"),
                        ],
                        max_length=20,
                    ),
                ),
                ("total_standards_analyzed", models.IntegerField(default=0)),
                (
                    "overall_alignment_score",
                    models.FloatField(
                        default=0.0, help_text="Overall alignment score (0-100)"
                    ),
                ),
                ("exact_matches", models.IntegerField(default=0)),
                ("semantic_matches", models.IntegerField(default=0)),
                ("conceptual_matches", models.IntegerField(default=0)),
                (
                    "alignment_report",
                    models.JSONField(
                        default=dict, help_text="Detailed alignment analysis"
                    ),
                ),
                ("improvement_suggestions", models.TextField(blank=True)),
                (
                    "gap_analysis",
                    models.JSONField(
                        default=dict, help_text="Missing elements for better alignment"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Content Alignment",
                "verbose_name_plural": "Content Alignments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Two-letter state code (e.g., CA, NY)",
                        max_length=2,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(help_text="Full state name", max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "State",
                "verbose_name_plural": "States",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SubjectArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Subject Area",
                "verbose_name_plural": "Subject Areas",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CacheEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cache_key",
                    models.CharField(
                        help_text="Unique cache key", max_length=255, unique=True
                    ),
                ),
                ("cache_value", models.JSONField(help_text="Cached data")),
                (
                    "cache_type",
                    models.CharField(
                        choices=[
                            ("coverage_analysis", "Coverage Analysis"),
                            ("topic_discovery", "Topic Discovery"),
                            ("similarity_search", "Similarity Search"),
                            ("strategic_analysis", "Strategic Analysis"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "parameters_hash",
                    models.CharField(
                        help_text="Hash of query parameters", max_length=64
                    ),
                ),
                (
                    "computation_time",
                    models.FloatField(
                        blank=True,
                        help_text="Time taken to compute (seconds)",
                        null=True,
                    ),
                ),
                ("expires_at", models.DateTimeField(help_text="Cache expiry time")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Cache Entry",
                "verbose_name_plural": "Cache Entries",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["cache_key"], name="standards_c_cache_k_7bda8e_idx"
                    ),
                    models.Index(
                        fields=["cache_type", "expires_at"],
                        name="standards_c_cache_t_a51bb5_idx",
                    ),
                    models.Index(
                        fields=["parameters_hash"],
                        name="standards_c_paramet_7338db_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="GradeLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        help_text="Grade level (e.g., K, 1, 2, ..., 12)", max_length=20
                    ),
                ),
                (
                    "grade_numeric",
                    models.IntegerField(
                        help_text="Numeric representation of grade (K=0, 1=1, etc.)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Grade Level",
                "verbose_name_plural": "Grade Levels",
                "ordering": ["grade_numeric"],
                "unique_together": {("grade",)},
            },
        ),
        migrations.CreateModel(
            name="Concept",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Concept name (e.g., 'Fraction Operations')",
                        max_length=200,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("embedding", models.TextField(blank=True, null=True)),
                ("keywords", models.TextField(blank=True, default="[]")),
                (
                    "complexity_score",
                    models.FloatField(
                        blank=True,
                        help_text="Computed complexity metric (0-1)",
                        null=True,
                    ),
                ),
                (
                    "states_covered",
                    models.IntegerField(
                        default=0, help_text="Number of states covering this concept"
                    ),
                ),
                (
                    "coverage_percentage",
                    models.FloatField(
                        default=0.0,
                        help_text="Percentage of states covering this concept",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grade_levels",
                    models.ManyToManyField(
                        related_name="concepts", to="standards.gradelevel"
                    ),
                ),
                (
                    "subject_areas",
                    models.ManyToManyField(
                        related_name="concepts", to="standards.subjectarea"
                    ),
                ),
            ],
            options={
                "verbose_name": "Concept",
                "verbose_name_plural": "Concepts",
                "ordering": ["-coverage_percentage", "name"],
            },
        ),
        migrations.CreateModel(
            name="Standard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Standard code (e.g., CCSS.MATH.CONTENT.1.OA.A.1)",
                        max_length=50,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "domain",
                    models.CharField(
                        blank=True, help_text="Domain or strand", max_length=200
                    ),
                ),
                (
                    "cluster",
                    models.CharField(
                        blank=True, help_text="Cluster or topic", max_length=200
                    ),
                ),
                (
                    "embedding",
                    models.TextField(
                        blank=True,
                        help_text="Text embedding for similarity search",
                        null=True,
                    ),
                ),
                ("keywords", models.TextField(blank=True, default="[]")),
                ("skills", models.TextField(blank=True, default="[]")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grade_levels",
                    models.ManyToManyField(
                        related_name="standards", to="standards.gradelevel"
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standards",
                        to="standards.state",
                    ),
                ),
                (
                    "subject_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standards",
                        to="standards.subjectarea",
                    ),
                ),
            ],
            options={
                "verbose_name": "Standard",
                "verbose_name_plural": "Standards",
                "ordering": ["state", "subject_area", "code"],
            },
        ),
        migrations.CreateModel(
            name="ContentStandardMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "match_type",
                    models.CharField(
                        choices=[
                            ("exact", "Exact Match"),
                            ("semantic", "Semantic Match"),
                            ("conceptual", "Conceptual Match"),
                            ("skill", "Skill-Based Match"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        help_text="Confidence in the match (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "similarity_score",
                    models.FloatField(
                        help_text="Similarity score (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "matched_text_snippet",
                    models.TextField(
                        blank=True, help_text="Snippet of content that matched"
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True, help_text="Explanation of why this match was made"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_alignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="standards.contentalignment",
                    ),
                ),
                (
                    "standard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="standards.standard",
                    ),
                ),
            ],
            options={
                "ordering": ["-confidence_score", "-similarity_score"],
                "unique_together": {("content_alignment", "standard")},
            },
        ),
        migrations.AddField(
            model_name="contentalignment",
            name="matched_standards",
            field=models.ManyToManyField(
                through="standards.ContentStandardMatch", to="standards.standard"
            ),
        ),
        migrations.CreateModel(
            name="ClusterMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "membership_strength",
                    models.FloatField(
                        help_text="How strongly this standard belongs to the cluster (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "standard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="standards.standard",
                    ),
                ),
            ],
            options={
                "ordering": ["-membership_strength"],
            },
        ),
        migrations.AddField(
            model_name="contentalignment",
            name="states_with_full_alignment",
            field=models.ManyToManyField(
                blank=True, related_name="fully_aligned_content", to="standards.state"
            ),
        ),
        migrations.AddField(
            model_name="contentalignment",
            name="states_with_partial_alignment",
            field=models.ManyToManyField(
                blank=True,
                related_name="partially_aligned_content",
                to="standards.state",
            ),
        ),
        migrations.CreateModel(
            name="StrategicPlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "mvc_data",
                    models.JSONField(
                        default=dict, help_text="Minimum Viable Coverage calculations"
                    ),
                ),
                (
                    "target_coverage_percentage",
                    models.FloatField(
                        default=80.0, help_text="Target coverage percentage"
                    ),
                ),
                (
                    "priority_matrix",
                    models.JSONField(
                        default=dict, help_text="Impact vs Effort analysis"
                    ),
                ),
                (
                    "roi_analysis",
                    models.JSONField(
                        default=dict, help_text="Return on investment calculations"
                    ),
                ),
                (
                    "estimated_development_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "projected_market_reach",
                    models.IntegerField(
                        blank=True, help_text="Estimated student reach", null=True
                    ),
                ),
                (
                    "timeline_data",
                    models.JSONField(
                        default=dict, help_text="Implementation timeline and milestones"
                    ),
                ),
                (
                    "estimated_completion_months",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "risk_factors",
                    models.JSONField(
                        default=dict,
                        help_text="Identified risks and mitigation strategies",
                    ),
                ),
                (
                    "implementation_difficulty",
                    models.CharField(
                        choices=[
                            ("low", "Low Difficulty"),
                            ("medium", "Medium Difficulty"),
                            ("high", "High Difficulty"),
                            ("very_high", "Very High Difficulty"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("created_by", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "high_priority_concepts",
                    models.ManyToManyField(
                        blank=True,
                        related_name="high_priority_plans",
                        to="standards.concept",
                    ),
                ),
                (
                    "target_grades",
                    models.ManyToManyField(
                        related_name="strategic_plans", to="standards.gradelevel"
                    ),
                ),
                (
                    "target_states",
                    models.ManyToManyField(
                        related_name="strategic_plans", to="standards.state"
                    ),
                ),
                (
                    "target_subjects",
                    models.ManyToManyField(
                        related_name="strategic_plans", to="standards.subjectarea"
                    ),
                ),
            ],
            options={
                "verbose_name": "Strategic Plan",
                "verbose_name_plural": "Strategic Plans",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CoverageAnalysis",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("total_standards", models.IntegerField(default=0)),
                ("covered_concepts", models.IntegerField(default=0)),
                ("coverage_percentage", models.FloatField(default=0.0)),
                (
                    "bell_curve_data",
                    models.JSONField(
                        default=dict, help_text="Distribution data for visualization"
                    ),
                ),
                (
                    "gap_analysis",
                    models.JSONField(
                        default=dict, help_text="Identified gaps and recommendations"
                    ),
                ),
                (
                    "benchmark_comparison",
                    models.JSONField(
                        default=dict, help_text="Comparison with other states"
                    ),
                ),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("state", "State Analysis"),
                            ("subject", "Subject Analysis"),
                            ("grade", "Grade Level Analysis"),
                            ("comprehensive", "Comprehensive Analysis"),
                        ],
                        default="state",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grade_level",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="coverage_analyses",
                        to="standards.gradelevel",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="coverage_analyses",
                        to="standards.state",
                    ),
                ),
                (
                    "subject_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="coverage_analyses",
                        to="standards.subjectarea",
                    ),
                ),
            ],
            options={
                "verbose_name": "Coverage Analysis",
                "verbose_name_plural": "Coverage Analyses",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TopicCluster",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "embedding",
                    models.TextField(
                        blank=True,
                        help_text="Centroid embedding for cluster",
                        null=True,
                    ),
                ),
                (
                    "silhouette_score",
                    models.FloatField(
                        blank=True,
                        help_text="Cluster quality metric (-1 to 1)",
                        null=True,
                    ),
                ),
                (
                    "cohesion_score",
                    models.FloatField(
                        blank=True,
                        help_text="Internal cluster cohesion (0-1)",
                        null=True,
                    ),
                ),
                ("standards_count", models.IntegerField(default=0)),
                ("states_represented", models.IntegerField(default=0)),
                (
                    "regional_pattern",
                    models.JSONField(
                        blank=True, default=dict, help_text="Regional distribution data"
                    ),
                ),
                ("common_terms", models.TextField(blank=True, default="[]")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "grade_levels",
                    models.ManyToManyField(
                        related_name="topic_clusters", to="standards.gradelevel"
                    ),
                ),
                (
                    "standards",
                    models.ManyToManyField(
                        related_name="topic_clusters",
                        through="standards.ClusterMembership",
                        to="standards.standard",
                    ),
                ),
                (
                    "subject_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="topic_clusters",
                        to="standards.subjectarea",
                    ),
                ),
            ],
            options={
                "verbose_name": "Topic Cluster",
                "verbose_name_plural": "Topic Clusters",
                "ordering": ["-silhouette_score", "-standards_count"],
            },
        ),
        migrations.AddField(
            model_name="clustermembership",
            name="cluster",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="standards.topiccluster"
            ),
        ),
        migrations.CreateModel(
            name="StandardCorrelation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "similarity_score",
                    models.FloatField(
                        help_text="Cosine similarity score between standard embeddings (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "correlation_type",
                    models.CharField(
                        choices=[
                            ("exact", "Exact Match"),
                            ("similar", "Similar"),
                            ("related", "Related"),
                            ("partial", "Partial Match"),
                        ],
                        default="similar",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "verified",
                    models.BooleanField(
                        default=False,
                        help_text="Has this correlation been manually verified?",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "standard_1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="correlations_as_standard_1",
                        to="standards.standard",
                    ),
                ),
                (
                    "standard_2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="correlations_as_standard_2",
                        to="standards.standard",
                    ),
                ),
            ],
            options={
                "verbose_name": "Standard Correlation",
                "verbose_name_plural": "Standard Correlations",
                "ordering": ["-similarity_score"],
                "unique_together": {("standard_1", "standard_2")},
            },
        ),
        migrations.AddIndex(
            model_name="contentalignment",
            index=models.Index(
                fields=["content_hash"], name="standards_c_content_4e1acd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="contentalignment",
            index=models.Index(
                fields=["overall_alignment_score"],
                name="standards_c_overall_9f3bc6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="contentalignment",
            index=models.Index(
                fields=["created_at"], name="standards_c_created_df1fa6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="strategicplan",
            index=models.Index(
                fields=["status", "created_at"], name="standards_s_status_f85275_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="strategicplan",
            index=models.Index(
                fields=["target_coverage_percentage"],
                name="standards_s_target__6d683e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="standard",
            index=models.Index(
                fields=["state", "subject_area"], name="standards_s_state_i_543982_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="standard",
            index=models.Index(fields=["domain"], name="standards_s_domain_d01adc_idx"),
        ),
        migrations.AddIndex(
            model_name="standard",
            index=models.Index(
                fields=["cluster"], name="standards_s_cluster_927d98_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="standard",
            unique_together={("state", "code")},
        ),
        migrations.AddIndex(
            model_name="coverageanalysis",
            index=models.Index(
                fields=["state", "subject_area", "grade_level"],
                name="standards_c_state_i_52ef72_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="coverageanalysis",
            index=models.Index(
                fields=["analysis_type", "created_at"],
                name="standards_c_analysi_c105dd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="concept",
            index=models.Index(
                fields=["states_covered"], name="standards_c_states__920cd1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="concept",
            index=models.Index(
                fields=["coverage_percentage"], name="standards_c_coverag_e256ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="concept",
            index=models.Index(
                fields=["complexity_score"], name="standards_c_complex_12611c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="topiccluster",
            index=models.Index(
                fields=["subject_area", "standards_count"],
                name="standards_t_subject_92c8e2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="topiccluster",
            index=models.Index(
                fields=["silhouette_score"], name="standards_t_silhoue_7aa0bb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="clustermembership",
            unique_together={("standard", "cluster")},
        ),
    ]
